set nocompatible
filetype off

let g:python3_host_prog = '/usr/local/bin/python3'

call plug#begin('~/.vim/bundle')
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'ton/vim-alternate'
Plug 'vim-airline/vim-airline'
Plug 'danngreen/vim-airline-themes'

Plug 'majutsushi/tagbar'
Plug 'amix/open_file_under_cursor.vim'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
"Plug 'ctrlpvim/ctrlp.vim'
Plug 'thaerkh/vim-workspace'
Plug 'tpope/vim-fugitive'
Plug 'rhysd/vim-clang-format'

Plug 'dr-kino/cscope-maps'

" Plug 'RishabhRD/popfix'
" Plug 'RishabhRD/nvim-lsputils'

Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-lua/telescope.nvim'
Plug 'nvim-lua/completion-nvim'
Plug 'nvim-lua/lsp-status.nvim'
Plug 'glepnir/lspsaga.nvim'

Plug 'rust-lang/rust.vim'
Plug 'nvim-treesitter/nvim-treesitter'
" Plug 'kevinhwang91/nvim-bqf'

" Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'jackguo380/vim-lsp-cxx-highlight'

call plug#end()
set rtp^=~/.vim/bundle/ctrlp.vim
set rtp+=/usr/local/opt/fzf

" Basics
set exrc
set secure
set makeprg=make\ -j16

syntax on
colors molokai

"Shortcut Keys
"-------------
let mapleader = ","

nnoremap <space> :noh<CR>
inoremap jk <esc>
inoremap jj <esc>
"Repeat last macro
noremap Q @@
"Sensible Yank whole line with Y, like D
noremap Y y$

" Vim Cursor in Insert mode
if (!has("nvim"))
	let &t_SI = "\e[3 q"
	let &t_EI = "\e[1 q"
	augroup cursorDraw
		au!
		autocmd VimEnter * silent !echo -ne "\e[1 q"
	augroup END
end

"set cul
set guicursor=n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20,a:blinkwait1-blinkon150-blinkoff50

" Searching
" ---------
" Replace all occurances of word under cursor (r = ask for conf., R = don't)
nnoremap <leader>r *Nyiw:%s/\<<C-r><C-w>\>//gc<Left><Left><Left>
nnoremap <leader>R *N:%s/\<<C-r><C-w>\>//g<Left><Left>
" Replace visual selection (works with any characters, even / and \
" (r = ask for conf. R = don't ask)
vnoremap <leader>r y:%s/\V<C-R>=escape(@",'/\')<CR>//gc<Left><Left><Left>
vnoremap <leader>R y:%s/\V<C-R>=escape(@",'/\')<CR>//g<Left><Left>

"Fuzzy search for a file

"Search all files for selected text
"   :Ag  - Start fzf with preview window that can be disabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
" 	:Ags and Ags! - Case-sensitive versions
"   :LS and LS! - search directory given by argument ,for example, :Files ../otherproject
command! -bang -nargs=* Ags
	\ call fzf#vim#ag_raw('-s '. <q-args>,
	\       <bang>0 ? fzf#vim#with_preview('up:60%', '?')
	\               : fzf#vim#with_preview('right:50%', '?'),
	\       <bang>0)

command! -bang -nargs=* Ag
	\	call fzf#vim#ag(<q-args>,
	\       <bang>0 ? fzf#vim#with_preview('up:60%', '?')
	\               : fzf#vim#with_preview('right:50%', '?'),
	\       <bang>0)

"Find files even ones that are ignored by git (exclude .git and .ccls-cache, .cache, .clangd dirs)
command! -bang -complete=dir -nargs=* LS
    \ call fzf#run(fzf#wrap({'source': 'fd --type f --type l --hidden --follow --no-ignore --exclude .git --exclude .ccls-cache --exclude .clangd --exclude .cache --exclude *.o --exclude *.d', 'dir': <q-args>}, <bang>0))

noremap <F3> :Files<CR>
noremap <F15> :LS .<CR>
" nnoremap <F15> <cmd>lua require'telescope.builtin'.git_files{}<CR>
nnoremap <leader><F3> <cmd>lua require'telescope.builtin'.find_files{}<CR>
noremap <leader>v<F3> :LS ~/dot-files/vim

nnoremap <F4> :Ag<CR>
nnoremap <F16> :Ag <C-r><C-w><CR>
vnoremap <F16> :<C-u>Ag <C-r><C-w><CR>
"nnoremap <leader><F4> :Ags <C-r><C-w><CR>
"vnoremap <leader><F4> :<C-u>Ags <C-r><C-w><CR>

nnoremap <leader><F4> <cmd>lua require'telescope.builtin'.live_grep{}<CR>
nnoremap <leader>q <cmd>lua require'telescope.builtin'.quickfix{}<CR>
" Buffer Navigation
" -----------------
" Close the current buffer and move to the previous one
nmap <leader>w :bp <BAR> bd #<CR>

"Select a buffer from airline tabline
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <M-Tab> <Plug>AirlineSelectNextTab
nmap <S-Tab> <Plug>AirlineSelectPrevTab

noremap <F12> :NERDTreeToggle<CR>
noremap <F24> :Vexplore<CR>
let g:netrw_banner = 0
let g:netrw_winsize = 25
let g:netrw_altv = 1
let g:netrw_browse_split = 4

if (has("nvim"))
lua <<EOF
require('bqf').setup({
    auto_resize_height = false,
})
EOF
endif

let g:AlternateExtensionMappings = [{'.cc':'.hh', '.hh':'.h', '.h':'.hpp', '.hpp':'.cpp', '.cpp':'.cc'}, {'.c':'.h', '.h':'.c'}]
let g:AlternatePaths = ['.', '../inc', '../include', '../src', '../Src', '../Inc']

noremap <M-h> :Alternate<CR>
nnoremap <leader>h <C-W>v:Alternate<CR>

noremap <F9> :set list!<CR>
"Tags
nnoremap <F11> :TagbarToggle<CR>
let g:tagbar_file_size_limit = 100000 
"<F23> is Shift+<F11>
nnoremap <F23> :Dispatch! ctags -R .<CR>:Dispatch! cscope -bkqR<CR>

nnoremap <F10> :cope<CR>
nnoremap <F22> :ccl<CR>

nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
nnoremap <leader>vs :source ~/.vim/vimrc<CR>
nnoremap <leader>vv :edit ~/.vim/vimrc<CR>
nnoremap <leader>vn :edit ~/.config/nvim/init.vim<CR>
nnoremap <leader>vl :edit ~/dot-files/vim/nvim-lsp-setup.vim<CR>
nnoremap <leader>va :edit ~/dot-files/vim/.vim/lua/lsp_config.lua<CR>
nnoremap <leader>vcc :edit ~/Library/Preferences/clangd/config.yaml<CR>

"Copy/paste
vnoremap <M-c> "+y
vnoremap <M-x> "+d
" nnoremap <leader>l :set norelativenumber<CR>
" nnoremap <leader>L :set relativenumber<CR>

"Building
"nnoremap <leader>b :silent make<CR>:cw<CR>
nnoremap <leader>m :wa<CR>:Make<CR>
nnoremap <leader>t :wa<CR>:Dispatch make -f tests/Makefile<CR>
nnoremap <leader>MM :wa<CR>:Dispatch make clean && bear make -j16 && compdb -p ./ list > tmpcc && rm compile_commands.json && mv tmpcc compile_commands.json<CR>

if has("nvim")
source ~/dot-files/vim/nvim-lsp-setup.vim
endif

"Settings
"--------
set ts=4
set sw=4
set hlsearch
set number
set hidden
set mouse=a
set splitright

" if !&scrolloff
"   set scrolloff=1       " Show next 3 lines while scrolling.
" endif
if !&sidescrolloff
set sidescrolloff=5   " Show next 5 columns while side-scrolling.
endif
set nostartofline       " Do not jump to first character with page commands.
set noswapfile                  " Don't use swapfile
set backspace=indent,eol,start  " Makes backspace key more powerful.
set magic 				" For regular expressions turn magic on

" Airline
" -------
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline_highlighting_cache = 1
"let g:airline_section_x=airline#section#create(['']) "Disable displaying current function name (I find it distracting)
" let g:airline_section_x='%{LspStatus()}'
let g:airline_theme = 'dgmolokai'
let g:airline_powerline_fonts = 1 	"clone and install fonts from https://github.com/powerline/fonts,
" 									 then set iTerm or MacVim font to a font ending in 'for Powerline'
"vim-workspace shouldn't remove trailing spaces: conflicts with exiting Insert
"mode with a (temporary) trailing space in order to paste a buffer, and losing a space
let g:workspace_autosave_untrailspaces = 0

" Display
" -------
if has("nvim")
set termguicolors
endif
set guifont=Roboto_Mono_Light_for_Powerline:h13

"hi NonText guibg=black
"hi Normal guibg=black
"hi LineNr guibg=black
hi Search guibg=#DDAA00 guifg=black
hi Visual guibg=#803D3D
hi MatchParen term=bold cterm=bold gui=bold guibg=#446644 guifg=NONE
hi Function guifg=#22EEA6
hi cCustomFunc guifg=#A6EE22 gui=bold
hi comment guifg=#999999
hi Whitespace guifg=grey50 gui=none

hi Pmenu guibg=#333333


set incsearch
if has("nvim")
set inccommand=nosplit
set listchars=eol:⏎,tab:\|\ ,trail:*,nbsp:⎵,space:.
endif


" Syntax
" ------
"vim-cpp-enhanced-highlight options:
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1
"Highlight template functions (can be a little slow on large files)
let g:cpp_experimental_simple_template_highlight = 1
"Highlight template functions (faster implementation but has some corner cases where it doesn't work.)
let g:cpp_experimental_template_highlight = 0
"This will highlight the keywords concept and requires as well as all named requirements (like DefaultConstructible) in the standard library.
let g:cpp_concepts_highlight = 1
"Disable highlighting of user defined functions
let g:cpp_no_function_highlight = 0

"ctrlP
"-----
" Setup some default ignores
let g:ctrlp_custom_ignore = {
\ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
\ 'file': '\v\.(png|jpg|jpeg|pdf|o|d|a)$',
\}
" Use nearest .git directory as cwd
let g:ctrlp_working_path_mode = 'r'

" Clang-format
" ------------
let g:clang_format#auto_format = 1
let g:clang_format#detect_style_file = 1
let g:clang_format#enable_fallback_style = 1
let g:clang_format#style_options = {
\ "BasedOnStyle" : "LLVM",
\ "Standard" : "c++17",
\ "UseTab" : "Always",
\ "TabWidth" :  4,
\ "IndentWidth" :  4,
\ "ColumnLimit" :  0,
\ "AccessModifierOffset" :  "-4",
\ "AlignAfterOpenBracket" : "Align",
\ "AlignEscapedNewlines" : "Left",
\ "AlignOperands" : "true",
\ "AllowShortIfStatementsOnASingleLine" : "Never",
\ "AllowShortFunctionsOnASingleLine" : "All",
\ "AllowShortBlocksOnASingleLine" : "true",
\ "AlwaysBreakTemplateDeclarations" : "true",
\ "AllowAllArgumentsOnNextLine" : "true",
\ "BinPackArguments" :  "false",
\ "BinPackParameters" :  "false",
\ "BreakConstructorInitializers" : "BeforeComma",
\ "BreakInheritanceList" : "AfterColon",
\ "BreakBeforeBraces" : "Custom",
\ "BreakBeforeTernaryOperators" : "false",
\ "BraceWrapping" : { 
	\ "AfterCaseLabel" :  "false",
	\ "AfterClass" :  "false",
	\ "AfterControlStatement" :  "MultiLine",
	\ "AfterEnum" :  "false",
	\ "AfterFunction" :  "false",
	\ "AfterNamespace" :  "true",
	\ "AfterStruct" :  "false",
	\ "AfterUnion" :  "false",
	\ "AfterExternBlock" :  "false",
	\ "BeforeCatch" :  "false",
	\ "BeforeElse" :  "false",
	\ "IndentBraces" :  "false",
	\ "SplitEmptyFunction" :  "false",
	\ "SplitEmptyRecord" :  "false",
	\ "SplitEmptyNamespace" :  "false",
\ },
\ "ConstructorInitializerIndentWidth" :  4,
\ "ContinuationIndentWidth" : 0,
\ "IndentCaseLabels" : "true",
\ "IndentPPDirectives" : "BeforeHash",
\ "SpaceBeforeInheritanceColon" : "true",
\ "SpaceBeforeCtorInitializerColon" : "true",
\ "SpaceBeforeAssignmentOperators" : "true",
\ "SpaceAfterTemplateKeyword" : "false",
\ "SpaceAfterCStyleCast" : "false",
\ "SpaceBeforeParens" : "ControlStatements",
\ "SpaceBeforeRangeBasedForLoopColon" : "true",
\ "SpaceInEmptyParentheses" : "false",
\ "SpacesInAngles" : "false",
\ "SpacesInCStyleCastParentheses" : "false",
\ }

augroup commentary_c_cpp
autocmd!
autocmd FileType c setlocal commentstring=//%s
autocmd FileType cpp setlocal commentstring=//%s
augroup END

augroup commentary_php
autocmd!
autocmd FileType php setlocal commentstring=//%s
augroup END

augroup kicad_lib_filetype
autocmd!
autocmd BufNewFile,BufRead *.lib set syntax=none
augroup END

set wildmenu
set wildignore+=tags,tags.*,build/*
let &path.=".,,**"
setlocal path=.,**

function! <SID>StripTrailingWhitespaces()
let _s=@/
let l = line(".")
let c = col(".")
%s/\s\+$//e
let @/=_s
call cursor(l, c)
endfunction
nnoremap <leader>T :call <SID>StripTrailingWhitespaces()<CR>

function! SearchMultiLine(bang, ...)
if a:0 > 0
let sep = (a:bang) ? '\_W\+' : '\_s\+'
let @/ = join(a:000, sep)
endif
endfunction
command! -bang -nargs=* -complete=tag S call SearchMultiLine(<bang>0, <f-args>)|normal! /<C-R>/<CR>

set cmdheight=1
set updatetime=300
set signcolumn=yes

set formatoptions-=r 	" Don't insert comment leader after hitting <Enter> in insert mode
set formatoptions-=o 	" Dont' insert comment leader after hitting o or O in normal mode
set formatoptions+=n 	" Format lists

""Completion
"Popup
"Fix LSP floating windows being interpreted as markdown:
hi markdownError none
hi Error none
