set nocompatible
filetype off
scriptencoding utf-8

let g:python3_host_prog = '/usr/local/bin/python3'

call plug#begin('~/.vim/bundle')
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'ton/vim-alternate'
Plug 'vim-airline/vim-airline'
Plug 'danngreen/vim-airline-themes'

Plug 'vimwiki/vimwiki'

Plug 'majutsushi/tagbar'
Plug 'amix/open_file_under_cursor.vim'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'thaerkh/vim-workspace'
Plug 'tpope/vim-fugitive'

Plug 'dr-kino/cscope-maps'

"LSP
Plug 'neovim/nvim-lspconfig'

Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
" Plug 'sharkdp/bat' " Preview for telescope
" Plug 'sharkdp/fd' "finder
" Plug 'BurntSushi/ripgrep' "finder
Plug 'nvim-lua/telescope.nvim'
Plug 'nvim-telescope/telescope-fzy-native.nvim'

Plug 'hrsh7th/nvim-compe'
Plug 'RishabhRD/popfix'
Plug 'RishabhRD/nvim-lsputils'
"Plug 'glepnir/lspsaga.nvim'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
" Plug 'kevinhwang91/nvim-bqf'

Plug 'voldikss/vim-floaterm'

Plug 'jackguo380/vim-lsp-cxx-highlight'

Plug 'rust-lang/rust.vim'

call plug#end()
set rtp+=/usr/local/opt/fzf

" Basics
" ------
set exrc
set secure
set makeprg=make\ -j16

set encoding=UTF-8

syntax on
colors molokai

"Shortcut Keys
"-------------
let mapleader = ","

nmap <leader>WW <Plug>VimwikiIndex

nnoremap <space> :noh<CR>
" inoremap jk <esc>
"Repeat last macro
noremap Q @@
"Sensible Yank whole line with Y, like D
noremap Y y$

let g:floaterm_keymap_new    = '<F7>'
let g:floaterm_keymap_toggle    = '<F8>'

" Vim Cursor in Insert mode
"--------------------------
if (!has("nvim"))
	let &t_SI = "\e[3 q"
	let &t_EI = "\e[1 q"
	augroup cursorDraw
		au!
		autocmd VimEnter * silent !echo -ne "\e[1 q"
	augroup END
end
set guicursor=n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20,a:blinkwait1-blinkon150-blinkoff50

" Searching/Replacing
" -------------------
" Replace all occurances of word under cursor (r = ask for conf., R = don't)
nnoremap <leader>r *Nyiw:%s/\<<C-r><C-w>\>//gc<Left><Left><Left>
nnoremap <leader>R *N:%s/\<<C-r><C-w>\>//g<Left><Left>
" Replace visual selection (works with any characters, even / and \
" (r = ask for conf. R = don't ask)
vnoremap <leader>r y:%s/\V<C-R>=escape(@",'/\')<CR>//gc<Left><Left><Left>
vnoremap <leader>R y:%s/\V<C-R>=escape(@",'/\')<CR>//g<Left><Left>

" Find Files (by file name)
" -------------------------
let g:fzf_preview_window = ['right:50%:nohidden', '?']

" :LS Find all files in a given directory (1 argument required) -- even ones that are ignored by git (exclude .git/ and cache/ dirs, binary files)
command! -bang -complete=dir -nargs=1 LS
    \ call fzf#run(fzf#wrap({
	\ 'source': "fd
	\ 		--type f
	\ 		--type l
	\ 		--hidden
	\ 		--follow
	\ 		--no-ignore
	\ 		-E .git
	\ 		-E .ccls-cache
	\ 		-E .clangd
	\ 		-E .cache
	\ 		-E *.o
	\ 		-E *.d
	\ 		-E .DS_Store
	\ 		-E cscope*
	\ 		-E tags*
	\ 		-E *.hex
	\ 		-E *.bin
	\ ", 
	\ 'dir': <q-args>}, <bang>0))

" F3: Find project files:
noremap <F3> :Files<CR>

" Shift+F3: Find all files in current dir:
noremap <F15> :LS .<CR>

lua <<EOF
require'telescope'.setup{
    extensions = {
        fzy_native = {
            override_generic_sorter = true,
            override_file_sorter = true,
        }
    },
--	defaults = {
--		file_sorter =  require'telescope.sorters'.get_fzy_sorter,
--		generic_sorter =  require'telescope.sorters'.get_fzy_sorter,
--	}
}
EOF

lua require'telescope'.load_extension('fzy_native')

" <leader>F3: Telescope find git files (project fileS)
nnoremap <leader><F3> <cmd>lua require'telescope.builtin'.git_files()<CR>
"
" <leader>Shift+F3: Telescope find all file (except cache dirs, binary files, tags/cscope)
nnoremap <leader><F15> <cmd>lua require'telescope.builtin'.find_files( 
	\ {find_command = {"fd", 
		\"--type", "f", 
		\"--type", "l", 
		\"--hidden", 
		\"--follow", 
		\"-E", ".git", 
		\"-E", ".ccls-cache", 
		\"-E", ".clangd", 
		\"-E", ".cache", 
		\"-E", "*.o", 
		\"-E", "*.d", 
		\"-E", ".DS_Store", 
		\"-E", "cscope*", 
		\"-E", "tags*", 
		\"-E", "*.hex", 
		\"-E", "*.bin"
	\}})<CR>

" <leader>v+F3: Find files in vim dotfiles
noremap <leader>v<F3> :LS ~/dot-files/vim<CR>

" Grep files
" ----------

":Rg - ripgrep to search in project files, following symlinks
command! -nargs=* Rg call fzf#vim#grep("rg \
							\ --follow
							\ --hidden
							\ --column
							\ --line-number
							\ --no-heading
							\ --smart-case
							\ --no-ignore
							\ -g '!.ccls-cache'
							\ -g '!.*cache/*'
							\ -g '!.git/*'
							\ -g '!tags*'
							\ -g '!cscope*'
							\ -g '!compile_commands.json'
							\ -g '!*.map'
							\ -g '!*.dmp'
							\ --color=always
							\ --colors 'match:bg:yellow'
							\ --colors 'match:fg:black'
							\ --colors 'match:style:nobold'
							\ --colors 'path:fg:blue'
							\ --colors 'path:style:bold'
							\ --colors 'line:fg:yellow'
							\ --colors 'line:style:bold'
							\ -- ".shellescape(<q-args>),
						\ 1, fzf#vim#with_preview('right:50%:nohidden', '?'), 0)

":RG - ripgrep called continually as you type: doesn't seem to work with regex like: 'ExactMatch !FilterThisOut 
function! RipgrepFzf(query, fullscreen)
  let command_fmt =	"rg  \
					\ --follow
					\ --hidden
					\ --column
					\ --line-number
					\ --no-heading
					\ --colors 'match:bg:yellow'
					\ --colors 'match:fg:black'
					\ --colors 'match:style:nobold'
					\ --colors 'path:fg:blue'
					\ --colors 'path:style:bold'
					\ --colors 'line:fg:yellow'
					\ --colors 'line:style:bold'
					\ --color=always
					\ --smart-case
					\ -- %s || true"
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

" Todo: F4=find in git files, S+F4 find word under cursor in git files,
" <leader>F4 = find in all files, <leader>S+F4 = find word in all files
nnoremap <F4> :Rg<CR>
vnoremap <F4> :<C-u>Rg <C-r><C-w><CR>
nnoremap <F16> :Rg <C-r><C-w><CR>
vnoremap <F16> :<C-u>Rg <C-r><C-w><CR>

lua require("finders")

nnoremap <F5> <cmd>lua require'finders'.find_stuff()<CR>
nnoremap <F17> <cmd>lua require'finders'.find_word()<CR>
nnoremap <leader><F5> <cmd>lua require'finders'.find_stuff_all_files()<CR>
nnoremap <leader><F17> <cmd>lua require'finders'.find_word_all_files()<CR>

" :FindInDir <dir> -- Uses telescope but is very slow at searching large dirs
command! -nargs=1 FindInDir lua require'telescope.builtin'.find_files({find_command = {
		\"fd", ".", <f-args>, 
		\"--type", "f", 
		\"--type", "l", 
		\"--hidden", 
		\"--follow", 
		\"--no-ignore", 
		\"-E", ".git", 
		\"-E", ".ccls-cache", 
		\"-E", ".clangd", 
		\"-E", ".cache", 
		\"-E", "*.o", 
		\"-E", "*.d", 
		\"-E", ".DS_Store", 
		\"-E", "cscope*", 
		\"-E", "tags*", 
		\"-E", "*.map", 
		\"-E", "*.dmp", 
		\"-E", "*.hex", 
		\"-E", "*.bin"
	\ }})


nnoremap <leader>q <cmd>lua require'telescope.builtin'.quickfix{}<CR>

 " Buffer Navigation
 " -----------------

nnoremap <F2> :Buffers<CR>

" Close the current buffer and move to the previous one
nnoremap <C-w>C <C-w>c
nnoremap <C-w>c :bp <BAR> bd #<CR>
nmap <leader>w :bp <BAR> bd #<CR>
nmap <M-w> :bp <BAR> bd #<CR>

"Select a buffer from airline tabline
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <M-Tab> <Plug>AirlineSelectNextTab
nmap <S-Tab> <Plug>AirlineSelectPrevTab

noremap <F12> :NERDTreeToggle<CR>

"BQF quickfix improvements
"-------------------------
" if (has("nvim"))
" lua <<EOF
" require('bqf').setup({
"     auto_resize_height = false,
" 	auto_preview = false,
" 	auto_enable = true
" })
" EOF
" endif

" Alternate File
" --------------
let g:AlternateExtensionMappings = [{'.cc':'.hh', '.hh':'.h', '.h':'.hpp', '.hpp':'.cpp', '.cpp':'.cc'}, {'.c':'.h', '.h':'.c'}]
let g:AlternatePaths = ['.', '../inc', '../include', '../src', '../Src', '../Inc']
noremap <M-h> :Alternate<CR>
nnoremap <leader>h <C-W>v:Alternate<CR>

" Vim Wiki
let g:vimwiki_list = [{'path': '~/Sync/wiki/', 'syntax': 'markdown'}]
"au FileType vimwiki setlocal shiftwidth=6 tabstop=6 noexpandtab


noremap <F9> :set list!<CR>
"Tags
nnoremap <F11> :TagbarToggle<CR>
let g:tagbar_file_size_limit = 100000 
"<F23> is Shift+<F11>
nnoremap <F23> :Dispatch! ctags -R .<CR>:Dispatch! cscope -bkqR<CR>

nnoremap <F10> :Cope<CR>
nnoremap <F22> :ccl<CR>

nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
nnoremap <leader>vs :source ~/.vim/vimrc<CR>
nnoremap <leader>vv :edit ~/.vim/vimrc<CR>
nnoremap <leader>vn :edit ~/.config/nvim/init.vim<CR>
nnoremap <leader>vl :edit ~/dot-files/vim/nvim-lsp-setup.vim<CR>
nnoremap <leader>va :edit ~/dot-files/vim/.vim/lua/lsp_config.lua<CR>
nnoremap <leader>vcc :edit ~/Library/Preferences/clangd/config.yaml<CR>

"Copy/paste
vnoremap <M-c> "+y
vnoremap <M-x> "+d

"Building
nnoremap <leader>m :wa<CR>:Make<CR>
nnoremap <leader>t :wa<CR>:Make tests<CR>
nnoremap <leader>MM :wa<CR>:Make compile_commands<CR>

if has("nvim")
source ~/dot-files/vim/nvim-lsp-setup.vim
endif

"Settings
"--------
set ts=4
set sw=4
set hlsearch
set number
set hidden
set mouse=a
set splitright

" if !&scrolloff
"   set scrolloff=1       " Show next 3 lines while scrolling.
" endif
if !&sidescrolloff
set sidescrolloff=5   " Show next 5 columns while side-scrolling.
endif
set nostartofline       " Do not jump to first character with page commands.
set noswapfile                  " Don't use swapfile
set backspace=indent,eol,start  " Makes backspace key more powerful.
set magic 				" For regular expressions turn magic on

" Airline
" -------
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
"let g:airline_highlighting_cache = 1
let g:airline_section_x=airline#section#create(['']) "Disable displaying current function name (I find it distracting)
let g:airline_theme = 'dgmolokai'
let g:airline_powerline_fonts = 1 	"clone and install fonts from https://github.com/powerline/fonts,
" 									 then set iTerm or MacVim font to a font ending in 'for Powerline'
let g:airline#extensions#nvimlsp#enabled = 1
let g:airline#extensions#nvimlsp#warning_symbol = "W"
let g:airline#extensions#nvimlsp#error_symbol = "E"
"
"vim-workspace shouldn't remove trailing spaces: conflicts with exiting Insert
"mode with a (temporary) trailing space in order to paste a buffer, and losing a space
let g:workspace_autosave_untrailspaces = 0
let g:workspace_autosave = 0

" Display
" -------
if has("nvim")
set termguicolors
endif
set guifont=Roboto_Mono_Light_for_Powerline:h13

"hi NonText guibg=black
"hi Normal guibg=black
"hi LineNr guibg=black
hi Search guibg=#DDAA00 guifg=black
hi Visual guibg=#803D3D
hi MatchParen term=bold cterm=bold gui=bold guibg=#446644 guifg=NONE
hi Function guifg=#22EEA6
hi cCustomFunc guifg=#A6EE22 gui=bold
hi comment guifg=#999999
hi Whitespace guifg=grey50 gui=none

hi Pmenu guibg=#333333

if has("nvim")
lua <<EOF
require'nvim-treesitter.configs'.setup {
	-- one of "all" "maintained" (parsers with maintainers), or a list of languages
  ensure_installed = {"cpp", "python", "rust", "regex", "javascript", "css", "bash", "c", "php"}, 
  --not lua
  highlight = {
    enable = true,
	incremental_selection = false,
	indent = false
  },
}
EOF
endif

set incsearch
if has("nvim")
set inccommand=nosplit
set listchars=eol:⏎,tab:\|\ ,trail:*,nbsp:⎵,space:.
endif



augroup commentary_c_cpp
autocmd!
autocmd FileType c setlocal commentstring=//%s
autocmd FileType cpp setlocal commentstring=//%s
augroup END

augroup commentary_php
autocmd!
autocmd FileType php setlocal commentstring=//%s
augroup END

augroup kicad_lib_filetype
autocmd!
autocmd BufNewFile,BufRead *.lib set syntax=none
augroup END

augroup clangd_yaml
	autocmd!
	autocmd BufNewFile,BufRead .clangd set syntax=yaml
augroup END

set wildmenu
set wildignore+=tags,tags.*,build/*
let &path.=".,,**"
setlocal path=.,**

function! <SID>StripTrailingWhitespaces()
let _s=@/
let l = line(".")
let c = col(".")
%s/\s\+$//e
let @/=_s
call cursor(l, c)
endfunction
nnoremap <leader>T :call <SID>StripTrailingWhitespaces()<CR>

function! SearchMultiLine(bang, ...)
if a:0 > 0
let sep = (a:bang) ? '\_W\+' : '\_s\+'
let @/ = join(a:000, sep)
endif
endfunction
command! -bang -nargs=* -complete=tag S call SearchMultiLine(<bang>0, <f-args>)|normal! /<C-R>/<CR>

set cmdheight=1
set updatetime=300
set signcolumn=yes

set formatoptions-=r 	" Don't insert comment leader after hitting <Enter> in insert mode
set formatoptions-=o 	" Dont' insert comment leader after hitting o or O in normal mode
set formatoptions+=n 	" Format lists

",pl Format Json from LspLog
nnoremap <leader>pjl ^f{v%yo<esc>P:.!python -m json.tool<CR>
",pjj Format Json 
nnoremap <leader>pjj :.!python -m json.tool<CR>
vnoremap <leader>pjj :!python -m json.tool<CR>



"Completion
"Popup
"Fix LSP floating windows being interpreted as markdown:
hi markdownError none
hi Error none
