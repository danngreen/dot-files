set nocompatible
filetype off
scriptencoding utf-8

let g:python3_host_prog = '/usr/local/bin/python3'

call plug#begin('~/.vim/bundle')
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'romgrk/barbar.nvim'
Plug 'itchyny/lightline.vim'
Plug 'ton/vim-alternate'
Plug 'vimwiki/vimwiki'

Plug 'majutsushi/tagbar'
"Plug 'amix/open_file_under_cursor.vim'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'thaerkh/vim-workspace'
" Plug 'kevinhwang91/nvim-bqf'

"LSP
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-lua/telescope.nvim'
Plug 'nvim-telescope/telescope-fzy-native.nvim'

Plug 'hrsh7th/nvim-compe'
Plug 'RishabhRD/popfix'
Plug 'RishabhRD/nvim-lsputils'
"Plug 'glepnir/lspsaga.nvim'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/playground'

Plug 'voldikss/vim-floaterm'
Plug 'rust-lang/rust.vim'

call plug#end()
set rtp+=/usr/local/opt/fzf

" Basics
" ------
set exrc
set secure
set makeprg=make\ -j16
set encoding=UTF-8
set noshowmode "Don't show mode, since it's shown in status bar
syntax on

"Shortcut Keys
"-------------
let mapleader = ","

nmap <leader>WW <Plug>VimwikiIndex

nnoremap <space> <cmd>noh<CR>
" inoremap jk <esc>
"Repeat last macro
noremap Q @@
"Sensible Yank whole line with Y, like D
noremap Y y$


" Vim Cursor in Insert mode
"--------------------------
if (!has("nvim"))
	let &t_SI = "\e[3 q"
	let &t_EI = "\e[1 q"
	augroup cursorDraw
		au!
		autocmd VimEnter * silent !echo -ne "\e[1 q"
	augroup END
end
set guicursor=n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20,a:blinkwait1-blinkon150-blinkoff50

" Searching/Replacing
" -------------------
" Replace all occurances of word under cursor (r = ask for conf., R = don't)
nnoremap <leader>r *Nyiw:%s/\<<C-r><C-w>\>//gc<Left><Left><Left>
nnoremap <leader>R *N:%s/\<<C-r><C-w>\>//g<Left><Left>
" Replace visual selection (works with any characters, even / and \
" (r = ask for conf. R = don't ask)
vnoremap <leader>r y:%s/\V<C-R>=escape(@",'/\')<CR>//gc<Left><Left><Left>
vnoremap <leader>R y:%s/\V<C-R>=escape(@",'/\')<CR>//g<Left><Left>

" Find Files (by file name)
" -------------------------
let g:fzf_preview_window = ['right:50%:nohidden', '?']

" :LS Find all files in a given directory (1 argument required) -- even ones that are ignored by git (exclude .git/ and cache/ dirs, binary files)
command! -bang -complete=dir -nargs=1 LS
    \ call fzf#run(fzf#wrap({
	\ 'source': "fd
	\ 		--type f
	\ 		--type l
	\ 		--hidden
	\ 		--follow
	\ 		--no-ignore
	\ 		-E .git
	\ 		-E .ccls-cache
	\ 		-E .clangd
	\ 		-E .cache
	\ 		-E *.o
	\ 		-E *.d
	\ 		-E .DS_Store
	\ 		-E cscope
	\ 		-E tags*
	\ 		-E *.hex
	\ 		-E *.bin
	\ ", 
	\ 'dir': <q-args>}, <bang>0))

" F3: Find project files:
noremap <F3> :Files<CR>

" Shift+F3: Find all files in current dir:
"noremap <F15> :LS .<CR> "Doesn't work?!!

lua <<EOF
require'telescope'.setup{
    extensions = {
        fzy_native = {
            override_generic_sorter = true,
            override_file_sorter = true,
        }
    },
	defaults = {
		file_sorter =  require'telescope.sorters'.get_fzy_sorter,
		generic_sorter =  require'telescope.sorters'.get_fzy_sorter,
		set_env = { ['COLORTERM'] = 'truecolor' },
	}
}
EOF

lua require'telescope'.load_extension('fzy_native')
" lua require('plenary.reload').reload_module("finders")

" <leader>F3: Telescope find git files (project fileS)
" nnoremap <leader><F3> <cmd>lua require'telescope.builtin'.git_files()<CR>
nnoremap <leader><F3> <cmd>lua require'finders'.find_file()<CR>
nnoremap <leader><F15> <cmd>lua require'finders'.find_all_files()<CR>
"

" <leader>v+F3: Find files in vim dotfiles
noremap <leader>v<F3> :LS ~/dot-files/vim<CR>
noremap <leader>v<F15> <cmd>lua require'finders'.find_dotfiles()<CR>

" Grep files
" ----------

":Rg - ripgrep to search in project files, following symlinks
command! -nargs=* Rg call fzf#vim#grep("rg \
							\ --follow
							\ --hidden
							\ --column
							\ --line-number
							\ --no-heading
							\ --smart-case
							\ --no-ignore
							\ -g '!.ccls-cache'
							\ -g '!.*cache/*'
							\ -g '!.git/*'
							\ -g '!tags*'
							\ -g '!cscope*'
							\ -g '!compile_commands.json'
							\ -g '!*.map'
							\ -g '!*.dmp'
							\ --color=always
							\ --colors 'match:bg:yellow'
							\ --colors 'match:fg:black'
							\ --colors 'match:style:nobold'
							\ --colors 'path:fg:blue'
							\ --colors 'path:style:bold'
							\ --colors 'line:fg:yellow'
							\ --colors 'line:style:bold'
							\ -- ".shellescape(<q-args>),
						\ 1, fzf#vim#with_preview('right:50%:nohidden', '?'), 0)

":RgDir texttofind dirtosearch
command! -nargs=* -complete=dir RgDir call fzf#vim#grep("rg \
							\ --follow
							\ --hidden
							\ --column
							\ --line-number
							\ --no-heading
							\ --smart-case
							\ --no-ignore
							\ -g '!.ccls-cache'
							\ -g '!.*cache/*'
							\ -g '!.git/*'
							\ -g '!tags*'
							\ -g '!cscope*'
							\ -g '!compile_commands.json'
							\ -g '!*.map'
							\ -g '!*.dmp'
							\ --color=always
							\ --colors 'match:bg:yellow'
							\ --colors 'match:fg:black'
							\ --colors 'match:style:nobold'
							\ --colors 'path:fg:blue'
							\ --colors 'path:style:bold'
							\ --colors 'line:fg:yellow'
							\ --colors 'line:style:bold'
							\ -- ".<q-args>,
						\ 1, fzf#vim#with_preview('right:50%:nohidden', '?'), 0)

" Todo: F4=find in git files, S+F4 find word under cursor in git files,
" <leader>F4 = find in all files, <leader>S+F4 = find word in all files
nnoremap <F4> :Rg<CR>
vnoremap <F4> :<C-u>Rg <C-r><C-w><CR>
nnoremap <F16> :Rg <C-r><C-w><CR>
vnoremap <F16> :<C-u>Rg <C-r><C-w><CR>

nnoremap <F5> <cmd>lua require'finders'.find_stuff()<CR>
nnoremap <F17> <cmd>lua require'finders'.find_word()<CR>
nnoremap <leader><F5> <cmd>lua require'finders'.find_stuff_all_files()<CR>
nnoremap <leader><F17> <cmd>lua require'finders'.find_word_all_files()<CR>

" Doesn't work: PATH must come after PATTERN for Rg, but telescope API doesn't
" seem to allow that...
command! -nargs=1 RgInDir lua require'finders'.find_stuff_in_dir(<f-args>)<CR>

nnoremap <leader>q <cmd>lua require'telescope.builtin'.quickfix{}<CR>

" Buffer Navigation
" -----------------

nnoremap <F2> :Buffers<CR>

let bufferline = get(g:, 'bufferline', {})
let bufferline.closable = v:true
let bufferline.auto_hide = v:true
let bufferline.clickable = v:true
let bufferline.icons = v:false
let bufferline.numbers = v:true
let bufferline.semantic_letters = v:true
let bufferline.icon_separator_active = '|'
let bufferline.icon_separator_inactive = '|'
let bufferline.icon_close_tab = 'X'
let bufferline.icon_close_tab_modified = '●'
let bufferline.maximum_padding = 2
" Close the current buffer and move to the previous one
nnoremap <C-w>C <C-w>c
nnoremap <C-w>c :bp <BAR> bd #<CR>
nmap <leader>w :bp <BAR> bd #<CR>
nmap <M-w> :bp <BAR> bd #<CR>

"Select a buffer from airline tabline
nmap <leader>1 <cmd>BufferGoto 1<CR>
nmap <leader>2 <cmd>BufferGoto 2<CR>
nmap <leader>3 <cmd>BufferGoto 3<CR>
nmap <leader>4 <cmd>BufferGoto 4<CR>
nmap <leader>5 <cmd>BufferGoto 5<CR>
nmap <leader>6 <cmd>BufferGoto 6<CR>
nmap <leader>7 <cmd>BufferGoto 7<CR>
nmap <leader>8 <cmd>BufferGoto 8<CR>
nmap <leader>9 <cmd>BufferGoto 9<CR>
nmap <M-Tab> <cmd>BufferNext<CR>
nmap <S-Tab> <cmd>BufferPrevious<CR>
nmap <M-<> <cmd>BufferMovePrevious<CR>
nmap <M->> <cmd>BufferMoveNext<CR>


" Alternate File
" --------------
let g:AlternateExtensionMappings = [{'.cc':'.hh', '.hh':'.h', '.h':'.hpp', '.hpp':'.cpp', '.cpp':'.cc'}, {'.c':'.h', '.h':'.c'}]
let g:AlternatePaths = ['.', '../inc', '../include', '../src', '../Src', '../Inc']
noremap <M-h> :Alternate<CR>
nnoremap <leader>h <C-W>v:Alternate<CR>

" Vim Wiki
let g:vimwiki_list = [{'path': '~/Sync/wiki/', 'syntax': 'markdown'}]
"au FileType vimwiki setlocal shiftwidth=6 tabstop=6 noexpandtab

let g:floaterm_keymap_new    = '<F7>'
let g:floaterm_keymap_toggle    = '<F8>'

noremap <F9> :set list!<CR>
nnoremap <F10> :Cope<CR>
nnoremap <F22> :ccl<CR>

"Tags
nnoremap <F11> :TagbarToggle<CR>
nnoremap <F23> :Dispatch! ctags -R .<CR>
let g:tagbar_file_size_limit = 100000 

noremap <F12> :NERDTreeToggle<CR>

" commonly used files
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
nnoremap <leader>vs :source ~/.vim/vimrc<CR>
nnoremap <leader>vv :edit ~/.vim/vimrc<CR>
nnoremap <leader>vn :edit ~/.config/nvim/init.vim<CR>
nnoremap <leader>vl :edit ~/dot-files/vim/nvim-lsp-setup.vim<CR>
nnoremap <leader>va :edit ~/dot-files/vim/.vim/lua/lsp_config.lua<CR>
nnoremap <leader>vcc :edit ~/Library/Preferences/clangd/config.yaml<CR>

"Copy/paste
vnoremap <M-c> "+y
vnoremap <M-x> "+d

"Building
nnoremap <leader>m :wa<CR>:Make<CR>
nnoremap <leader>t :wa<CR>:Make tests<CR>
nnoremap <leader>MM :wa<CR>:Make compile_commands<CR>

"Settings
"--------
set ts=4
set sw=4
set hlsearch
set number
set hidden
set mouse=a
set splitright
set nostartofline       " Do not jump to first character with page commands.
set noswapfile                  " Don't use swapfile
set backspace=indent,eol,start  " Makes backspace key more powerful.
set magic 				" For regular expressions turn magic on
set incsearch
set inccommand=nosplit
set listchars=eol:⏎,tab:\|\ ,trail:*,nbsp:⎵,space:.
set cmdheight=1
set updatetime=300
set signcolumn=yes
set formatoptions-=r 	" Don't insert comment leader after hitting <Enter> in insert mode
set formatoptions-=o 	" Dont' insert comment leader after hitting o or O in normal mode
set formatoptions+=n 	" Format lists
 
let g:workspace_autosave_untrailspaces = 0
let g:workspace_autosave = 0

" Display
" -------
if has("termguicolors")
	set termguicolors
endif
syntax enable
colors molokai
let g:lightline = {'colorscheme': 'molokai',
	  \   'active': {
      \       'left': [ [ 'mode', 'paste' ],
      \                 [ 'gitbranch', 'fullfilename', 'modified' ] ]
      \   },
	  \   'component': { 'fullfilename': '%f' },
      \   'component_function': {
      \       'gitbranch': 'FugitiveHead'
      \   },
	  \ }
" function! s:bufferline_custom() abort
hi BufferCurrent guifg=#080808 guibg=#e6db74
hi BufferCurrentIndex guifg=#080808 guibg=#e6db74
hi BufferCurrentSign guifg=#080808 guibg=#e6db74
hi BufferCurrentMod guifg=#080808 guibg=#e6db74
hi BufferCurrentTarget guifg=red guibg=#e6db74
hi BufferVisible guifg=#080808 guibg=#808080
hi BufferVisibleIndex guifg=#080808 guibg=#808080
hi BufferVisibleSign guifg=#080808 guibg=#808080
hi BufferVisibleMod guifg=#080808 guibg=#808080
hi BufferVisibleTarget guifg=red guibg=#808080
hi BufferInactive guifg=grey guibg=#080808
hi BufferInactiveIndex guifg=grey guibg=#080808
hi BufferInactiveSign guifg=grey guibg=#080808
hi BufferInactiveMod guifg=grey guibg=#080808
hi BufferInactiveTarget guifg=red guibg=#080808
hi BufferTabpageFill guibg=#080808
" endfunction
" augroup MolokaiCustom
"   autocmd!
"   autocmd ColorScheme molokai call s:bufferline_custom()
" augroup END
highlight ErrorMsg guifg=#F92672 guibg=#232526 gui=none 
highlight WarningMsg guifg=#FD971F guibg=#232526 gui=none 
highlight InfoMsg guifg=#E6DB74 guibg=#232526 gui=none 
highlight HintMsg guifg=#A6E22E guibg=#232526 gui=none 
highlight link LspDiagnosticsVirtualTextError ErrorMsg
highlight link LspDiagnosticsVirtualTextWarning WarningMsg
highlight link LspDiagnosticsVirtualTextInformation InfoMsg
highlight link LspDiagnosticsVirtualTextHint HintMsg
highlight LspReferenceText guibg=#433536


" let g:sonokai_style = 'default' 
" let g:sonokai_enable_italic = 1
" let g:sonokai_diagnostic_text_highlight = 0
" let g:sonokai_diagnostic_line_highlight = 0
" let g:sonokai_current_word = 'grey background'
" let g:sonokai_better_performance = 1

" function! s:sonokai_custom() abort
"     let l:palette = sonokai#get_palette('shusia')
" 	call sonokai#highlight('MatchParen', l:palette.none, l:palette.bg4, 'underline')
"     let l:bg5 = ['#464664',   '237',  'PurplyGray']
" 	highlight link LspDiagnosticsVirtualTextError Red
" 	highlight link LspDiagnosticsVirtualTextWarning Yellow
" 	highlight link LspDiagnosticsVirtualTextInformation Green
" 	highlight link LspDiagnosticsVirtualTextHint Green
" 	call sonokai#highlight('ErrorText', l:palette.none, l:palette.diff_red)
" 	call sonokai#highlight('WarningText', l:palette.none, l:palette.diff_yellow)
" 	call sonokai#highlight('InfoText', l:palette.none, l:palette.diff_blue)
" 	call sonokai#highlight('HintText', l:palette.none, l:palette.diff_green)
" endfunction

" augroup SonokaiCustom
"   autocmd!
"   autocmd ColorScheme sonokai call s:sonokai_custom()
" augroup END

" colors sonokai

function! SynStack ()
    for i1 in synstack(line("."), col("."))
        let i2 = synIDtrans(i1)
        let n1 = synIDattr(i1, "name")
        let n2 = synIDattr(i2, "name")
        echo n1 "->" n2
    endfor
endfunction
nnoremap gm1 :call SynStack()<CR>

set guifont=Roboto_Mono_Light_for_Powerline:h13

"hi NonText guibg=black
"hi Normal guibg=black
"hi LineNr guibg=black
" hi Search guibg=#DDAA00 guifg=black
hi Visual guibg=#803D3D
hi MatchParen term=bold cterm=bold gui=bold guibg=#446644 guifg=NONE
" hi Function guifg=#22EEA6
" hi cCustomFunc guifg=#A6EE22 gui=bold
" hi comment guifg=#999999
" hi Whitespace guifg=grey50 gui=none
" hi Pmenu guibg=#333333

if has("nvim")
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {"cpp", "python", "rust", "regex", "javascript", "css", "bash", "c", "php"}, 
  highlight = {
    enable = true,
	incremental_selection = false,
	indent = false
  },
}
EOF
endif


augroup commentary_c_cpp
autocmd!
autocmd FileType c setlocal commentstring=//%s
autocmd FileType cpp setlocal commentstring=//%s
augroup END

augroup commentary_php
autocmd!
autocmd FileType php setlocal commentstring=//%s
augroup END

augroup kicad_lib_filetype
autocmd!
autocmd BufNewFile,BufRead *.lib set syntax=none
augroup END

augroup clangd_yaml
	autocmd!
	autocmd BufNewFile,BufRead .clangd set syntax=yaml
augroup END

set wildmenu
set wildignore+=tags,tags.*,build/*
let &path.=".,,**"
setlocal path=.,**

function! <SID>StripTrailingWhitespaces()
let _s=@/
let l = line(".")
let c = col(".")
%s/\s\+$//e
let @/=_s
call cursor(l, c)
endfunction
nnoremap <leader>T :call <SID>StripTrailingWhitespaces()<CR>

function! SearchMultiLine(bang, ...)
if a:0 > 0
let sep = (a:bang) ? '\_W\+' : '\_s\+'
let @/ = join(a:000, sep)
endif
endfunction
command! -bang -nargs=* -complete=tag S call SearchMultiLine(<bang>0, <f-args>)|normal! /<C-R>/<CR>

"
"Format lsp logs:
function! FormatLspLogLine()
s/\s<--/00EOL00<--/ge | s/\s-->/00EOL00-->/ge | s/<<<\s/<<<00EOL00/ge | s/\(\\n\)\+/00EOL00/ge | s/>>>\s/>>>00EOL00/ge | s/00EOL00/\r/ge
endfunction

",pl Format Json from LspLog
nnoremap <leader>pjl ^f{v%yo<esc>P:.!python -m json.tool<CR>
",pjj Format Json 
nnoremap <leader>pjj :.!python -m json.tool<CR>
vnoremap <leader>pjj :!python -m json.tool<CR>


source ~/dot-files/vim/nvim-lsp-setup.vim

"Fix LSP floating windows being interpreted as markdown:
hi markdownError none
hi Error none
